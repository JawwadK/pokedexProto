{"version":3,"sources":["services/pokemon.js","helpers/typeColors.js","components/Card/Card.js","components/Card/index.js","components/Navbar/Navbar.js","components/Navbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","className","src","sprites","front_default","alt","name","types","map","type","style","backgroundColor","weight","height","abilities","ability","Navbar","NavBar","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","next","previous","loadingPokemon","results","console","log","fetchData","prev","all","pokemonRecord","_pokemonData","onClick","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63d3bb2a.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n    })\r\n}\r\n\r\nexport async function getPokemon(url) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                resolve(data);\r\n        });\r\n    });\r\n}","const typeColors = {\r\n    bug: '#729f3f',\r\n    dragon: '#53a4cf',\r\n    fairy: '#fdb9e9',\r\n    fire: '#fd7d24',\r\n    ghost: '#7b62a3',\r\n    ground: '#f7de3f',\r\n    normal: '#a4acaf',\r\n    pyschic: '#f366b9',\r\n    steel: '#9eb7b',\r\n    dark: '#707070',\r\n    electric: '#eed535',\r\n    fighting: '#d56723',\r\n    flying: '#3dc7ef',\r\n    grass: '#9bcc50',\r\n    ice: '#51c4e7',\r\n    poison: '#b97fc9',\r\n    rock: '#a38c21',\r\n    water: '#4592c4'\r\n}\r\n\r\nexport default typeColors;","import React from 'react';\r\nimport './style.css';\r\nimport typeColors from '../../helpers/typeColors';\r\n\r\nfunction Card({ pokemon }) {\r\n    return (\r\n        <div className=\"Card\">\r\n            <div className=\"Card__img\">\r\n                <img src={pokemon.sprites.front_default} alt=\"\"/>\r\n            </div>\r\n            <div className=\"Card__name\">\r\n                {pokemon.name}\r\n            </div>\r\n            <div className=\"Card__types\">\r\n                {pokemon.types.map(type => {\r\n                    return (\r\n                        <div className=\"Card__type\" style={{ backgroundColor: typeColors[type.type.name]}}>\r\n                            {type.type.name}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"Card__info\">\r\n                <div className=\"Card__data Carda_data--weight\">\r\n                    <p className=\"title\">Weight</p>\r\n                    <p>{pokemon.weight}</p>\r\n                </div>\r\n                <div className=\"Card__data Carda_data--height\">\r\n                    <p className=\"title\">Height</p>\r\n                    <p>{pokemon.height}</p>\r\n                </div>\r\n                <div className=\"Card__data Carda_data--ability\">\r\n                    <p className=\"title\">Ability</p>\r\n                    <p>{pokemon.abilities[0].ability.name}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\nexport default Card;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Navbar() {\r\n    return(\r\n    <div className=\"Navbar\">\r\n        Pokedex V 0.1\r\n    </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Navbar","import NavBar from './Navbar';\r\n\r\nexport default NavBar;","import React, { useState, useEffect} from 'react';\nimport { getAllPokemon, getPokemon } from './services/pokemon';\nimport Card from './components/Card';\nimport Navbar from './components/Navbar';\nimport './App.css';\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState('');\n  const [prevUrl, setPrevUrl] = useState('');\n  const [loading, setLoading] = useState(true);\n  const initialUrl = 'https://pokeapi.co/api/v2/pokemon';\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      let pokemon = await loadingPokemon(response.results);\n      console.log(pokemon);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl)\n    await loadingPokemon(data.results)\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl)\n    await loadingPokemon(data.results)\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const loadingPokemon = async (data) => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord\n    }))\n\n    setPokemonData(_pokemonData)\n  };\n\n  \n  return (\n    <div>\n      { loading ? <h1>Loading...</h1> : (\n        <>\n        <Navbar />\n        <div className=\"btn\">\n          <button onClick={prev}>Prev</button>\n          <button onClick={next}>Next</button>\n        </div>\n        <div className=\"grid-container\">\n          {pokemonData.map((pokemon, i) => {\n            return <Card key={i} pokemon={pokemon}/>\n          })}\n        </div>\n        <div className=\"btn\">\n          <button onClick={prev}>Prev</button>\n          <button onClick={next}>Next</button>\n        </div>\n        </>\n      )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}